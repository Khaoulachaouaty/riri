import { useEffect, useState } from "react";
import {
  Typography,
  Box,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  useTheme,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  DialogContentText,
} from "@mui/material";
import { demandePRService } from "../../services/demandePR_service";
import { demandeurService } from "../../services/demandeur_service";
import { styled } from '@mui/material/styles';

const DemandePieceRechange = () => {
  const theme = useTheme();
  const [dialogOpen, setDialogOpen] = useState(false);
  const [confirmationMessage, setConfirmationMessage] = useState("");
  const [demandes, setDemandes] = useState({});
  const [demandeurInfos, setDemandeurInfos] = useState({});

  const openDialog = (demande) => {
    setDialogOpen(true);
  };

  const closeDialog = () => {
    setDialogOpen(false);
    setConfirmationMessage("");
  };

  const accepterDemande = () => {
    const stockDisponible = true; // Modifier selon la disponibilité réelle du stock

    if (stockDisponible) {
      setConfirmationMessage("Demande réussie : stock disponible.");
    } else {
      setConfirmationMessage("Demande échouée : stock non disponible.");
    }
  };

  const annulerDemande = () => {
    console.log("Demande annulée avec succès");
    closeDialog();
  };

  const StyledTableRow = styled(TableRow)(({ theme }) => ({
    backgroundColor: theme.palette.mode === 'light' ? '#e3f2fd' : '#0d47a1',
    '&:hover': {
      backgroundColor: theme.palette.mode === 'light' ? '#bbdefb' : '#1565c0',
    },
  }));
  
  const StyledTableCell = styled(TableCell)(({ theme }) => ({
    color: theme.palette.mode === 'light' ? '#000' : '#fff',
  }));

  const buttonStyles = {
    backgroundColor: "#698b8e",
    color: "#fff",
    borderRadius: "10px",
    padding: "10px 20px",
    fontWeight: "bold",
    textTransform: "none",
    transition: "background-color 0.3s",
    "&:hover": {
      backgroundColor: "#547175",
    },
  };

  const loadAndGroupDemandes = async () => {
    try {
      const response = await demandePRService.getAllDemandePR();
      const groupedDemandes = groupDemandesByInterCode(response.data);
      setDemandes(groupedDemandes);
      const infos = await getAllDemandeurInfos(groupedDemandes);
      setDemandeurInfos(infos);
    } catch (error) {
      console.error("Error fetching ticket data:", error);
    }
  };

  useEffect(() => {
    loadAndGroupDemandes();
  }, []);

  const groupDemandesByInterCode = (demandes) => {
    const groupedDemandes = {};
    demandes.forEach((demande) => {
      const interCode =
        demande.ticket && typeof demande.ticket === "object"
          ? demande.ticket.interCode
          : demande.ticket;
      if (!groupedDemandes[interCode]) {
        groupedDemandes[interCode] = [];
      }
      groupedDemandes[interCode].push(demande);
    });
    return groupedDemandes;
  };

  const getAllDemandeurInfos = async (demandes) => {
    const infos = {};
    for (const interCode in demandes) {
      const demandeGroup = demandes[interCode];
      const firstDemande = demandeGroup[0];
      const demandeurId = firstDemande.ticket.demandeur;
      try {
        const response = await demandeurService.getDemandeur(demandeurId);
        infos[interCode] = response.data;
      } catch (error) {
        console.error(
          `Error fetching demandeur data for interCode ${interCode}:`,
          error
        );
        infos[interCode] = null;
      }
    }
    return infos;
  };

  return (
    <Box component="main">
      <Box
        sx={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          marginBottom: 2,
        }}
      >
        <Typography
          color="#aebfcb"
          fontSize="30px"
          margin="5px"
          sx={{ fontWeight: 500 }}
        >
          Pièces de rechange
        </Typography>
      </Box>

      <Box
        sx={{
          padding: "20px",
          borderRadius: "15px",
          flexWrap: "wrap",
          display: "flex",
          gap: "20px",
        }}
      >
        {Object.keys(demandes).map((interCode) => {
          const demandeGroup = demandes[interCode];
          const firstDemande = demandeGroup[0];
          const demandeurInfo = demandeurInfos[interCode];
          let nomSociete = "";
          let nomUtilisateur = "";
          let prenomUtilisateur = "";
          let eqptDesignation = "";

          if (demandeurInfo && demandeurInfo.client) {
            nomSociete = demandeurInfo.client.nomSociete;
            nomUtilisateur = demandeurInfo.user.nom;
            prenomUtilisateur = demandeurInfo.user.prenom;
          } else if (typeof firstDemande.ticket.demandeur === "object") {
            nomSociete = firstDemande.ticket.demandeur.client.nomSociete;
            nomUtilisateur = firstDemande.ticket.demandeur.user.nom;
            prenomUtilisateur = firstDemande.ticket.demandeur.user.prenom;
          }

          if (firstDemande.ticket.equipement) {
            eqptDesignation = firstDemande.ticket.equipement.eqptDesignation;
          }

          return (
            <TableContainer
              key={interCode}
              component={Paper}
              sx={{
                backgroundColor:
                  theme.palette.mode === "light" ? "#f6f7f8" : "#262626",
                padding: "20px",
                borderRadius: "15px",
                marginTop: "20px",
                width: "calc(50% - 10px)",
              }}
            >
              <Box
                sx={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                }}
              >
                <Typography
                  variant="h6"
                  color="primary"
                  sx={{ fontSize: "24px", fontWeight: "bold" }}
                >
                  {nomSociete}
                  <Box
                    sx={{
                      display: "inline-block",
                      verticalAlign: "middle",
                      marginLeft: "10px",
                    }}
                  >
                    <Typography
                      variant="subtitle1"
                      color="primary"
                      sx={{ fontSize: "16px", fontWeight: "bold" }}
                    >
                      ({prenomUtilisateur} {nomUtilisateur})
                    </Typography>
                  </Box>
                </Typography>
                <Typography
                  variant="subtitle1"
                  color="#bf5037"
                  sx={{ fontSize: "18px", fontWeight: "bold" }}
                >
                  {firstDemande.statutDemande}
                </Typography>
              </Box>
              <Typography
                variant="subtitle1"
                color="primary"
                sx={{ marginBottom: 1 }}
              >
                {eqptDesignation} - {interCode}
              </Typography>
              <Table sx={{ minWidth: 300 }}>
                <TableHead sx={{ backgroundColor: "#1976d2", color: "#fff" }}>
                  <TableRow>
                    <StyledTableCell>Article</StyledTableCell>
                    <StyledTableCell>Quantité</StyledTableCell>
                    <StyledTableCell>Etat</StyledTableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {demandeGroup.map((articleDemande, index) => (
                    <StyledTableRow
                      key={index}
                      sx={articleDemande.etat === "nouveau" ? { backgroundColor: "#a0c8ff" } : null}
                    >
                      <StyledTableCell>{articleDemande.art}</StyledTableCell>
                      <StyledTableCell>{articleDemande.quantiteDemande}</StyledTableCell>
                      <StyledTableCell>{articleDemande.etat}</StyledTableCell>
                    </StyledTableRow>
                  ))}
                </TableBody>
              </Table>
              <Box sx={{ textAlign: "right", marginTop: "10px" }}>
                <Button
                  variant="contained"
                  sx={buttonStyles}
                  onClick={() => openDialog(demandeGroup)}
                >
                  Traiter
                </Button>
              </Box>
            </TableContainer>
          );
        })}
      </Box>

      <Box
        sx={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          minHeight: "100vh",
        }}
      >
        <Dialog
          open={dialogOpen}
          onClose={closeDialog}
          fullWidth
          maxWidth="sm"
          PaperProps={{
            sx: {
              borderRadius: "10px",
            },
          }}
        >
          <DialogTitle sx={{ textAlign: "center" }}>
            Traitement de la demande
          </DialogTitle>
          <DialogContent>
            <DialogContentText sx={{ textAlign: "center" }}>
              {confirmationMessage}
            </DialogContentText>
          </DialogContent>
          <DialogActions sx={{ justifyContent: "center", paddingBottom: "20px" }}>
            {confirmationMessage === "" ? (
              <>
                <Button
                  onClick={closeDialog}
                  variant="contained"
                  sx={{
                    backgroundColor: theme.palette.mode === "light" ? "#c23c45" : "#2b9c56",
                    color: "#fff",
                    margin: "0 10px",
                    "&:hover": {
                      backgroundColor: theme.palette.mode === "light" ? "#9c2b36" : "#20803f",
                    },
                    borderRadius: 20,
                    padding: "10px 20px",
                  }}
                >
                  Annuler
                </Button>
                <Button
                  onClick={accepterDemande}
                  variant="contained"
                  sx={{
                    backgroundColor: theme.palette.mode === "light" ? "#2a6b38" : "#2b9c56",
                    color: "#fff",
                    margin: "0 10px",
                    "&:hover": {
                      backgroundColor: theme.palette.mode === "light" ? "#255630" : "#20803f",
                    },
                    borderRadius: 20,
                    padding: "10px 20px",
                  }}
                >
                  Accepter
                </Button>
              </>
            ) : (
              <Button
                onClick={closeDialog}
                variant="contained"
                sx={{
                  backgroundColor: theme.palette.mode === "light" ? "#4CAF50" : "#2b9c56",
                  color: "#fff",
                  margin: "0 10px",
                  "&:hover": {
                    backgroundColor: theme.palette.mode === "light" ? "#4CAF50" : "#20803f",
                  },
                  borderRadius: 20,
                  padding: "10px 20px",
                }}
              >
                Sortir
              </Button>
            )}
          </DialogActions>
        </Dialog>
      </Box>
    </Box>
  );
};

export default DemandePieceRechange;
w